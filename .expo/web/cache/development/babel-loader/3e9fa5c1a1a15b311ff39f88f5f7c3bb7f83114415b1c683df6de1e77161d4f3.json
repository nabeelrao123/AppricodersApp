{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useState } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport KeyboardAvoidingView from \"react-native-web/dist/exports/KeyboardAvoidingView\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport { useDispatch } from 'react-redux';\nimport { loginSuccess } from \"../slices/authSlice\";\nimport { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nexport default function LoginScreen() {\n  var _useState = useState(''),\n    _useState2 = _slicedToArray(_useState, 2),\n    email = _useState2[0],\n    setEmail = _useState2[1];\n  var _useState3 = useState(''),\n    _useState4 = _slicedToArray(_useState3, 2),\n    password = _useState4[0],\n    setPassword = _useState4[1];\n  var dispatch = useDispatch();\n  var onLogin = function onLogin() {\n    if (!email.trim() || !password.trim()) {\n      Alert.alert('Validation', 'Please enter both email and password.');\n      return;\n    }\n    dispatch(loginSuccess({\n      user: {\n        email: email\n      },\n      token: 'mocked-token'\n    }));\n  };\n  return _jsx(KeyboardAvoidingView, {\n    behavior: Platform.OS === 'ios' ? 'padding' : 'height',\n    style: styles.container,\n    children: _jsxs(View, {\n      style: styles.box,\n      children: [_jsx(Text, {\n        style: styles.title,\n        children: \"Welcome \\u2014 please log in\"\n      }), _jsx(TextInput, {\n        placeholder: \"Email\",\n        value: email,\n        onChangeText: setEmail,\n        style: styles.input,\n        keyboardType: \"email-address\",\n        autoCapitalize: \"none\"\n      }), _jsx(TextInput, {\n        placeholder: \"Password\",\n        value: password,\n        onChangeText: setPassword,\n        style: styles.input,\n        secureTextEntry: true\n      }), _jsx(Button, {\n        title: \"Log in\",\n        onPress: onLogin\n      })]\n    })\n  });\n}\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    padding: 16,\n    backgroundColor: '#fff'\n  },\n  box: {\n    width: '100%',\n    maxWidth: 420\n  },\n  title: {\n    fontSize: 20,\n    marginBottom: 12,\n    textAlign: 'center'\n  },\n  input: {\n    borderWidth: 1,\n    borderColor: '#ddd',\n    padding: 10,\n    marginBottom: 12,\n    borderRadius: 6\n  }\n});","map":{"version":3,"names":["React","useState","View","Text","TextInput","Button","StyleSheet","KeyboardAvoidingView","Platform","Alert","useDispatch","loginSuccess","jsx","_jsx","jsxs","_jsxs","LoginScreen","_useState","_useState2","_slicedToArray","email","setEmail","_useState3","_useState4","password","setPassword","dispatch","onLogin","trim","alert","user","token","behavior","OS","style","styles","container","children","box","title","placeholder","value","onChangeText","input","keyboardType","autoCapitalize","secureTextEntry","onPress","create","flex","justifyContent","alignItems","padding","backgroundColor","width","maxWidth","fontSize","marginBottom","textAlign","borderWidth","borderColor","borderRadius"],"sources":["C:/Users/Nabeel/Downloads/appricodersApp/appricodersApp/src/screens/LoginScreen.js"],"sourcesContent":["\nimport React, { useState } from 'react';\nimport { View, Text, TextInput, Button, StyleSheet, KeyboardAvoidingView, Platform, Alert } from 'react-native';\nimport { useDispatch } from 'react-redux';\nimport { loginSuccess } from '../slices/authSlice';\n\nexport default function LoginScreen() {\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const dispatch = useDispatch();\n\n  const onLogin = () => {\n    if (!email.trim() || !password.trim()) {\n      Alert.alert('Validation', 'Please enter both email and password.');\n      return;\n    }\n    dispatch(loginSuccess({ user: { email }, token: 'mocked-token' }));\n  };\n\n  return (\n    <KeyboardAvoidingView behavior={Platform.OS === 'ios' ? 'padding' : 'height'} style={styles.container}>\n      <View style={styles.box}>\n        <Text style={styles.title}>Welcome â€” please log in</Text>\n        <TextInput placeholder=\"Email\" value={email} onChangeText={setEmail} style={styles.input} keyboardType=\"email-address\" autoCapitalize=\"none\" />\n        <TextInput placeholder=\"Password\" value={password} onChangeText={setPassword} style={styles.input} secureTextEntry />\n        <Button title=\"Log in\" onPress={onLogin} />\n      </View>\n    </KeyboardAvoidingView>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: { flex:1, justifyContent:'center', alignItems:'center', padding:16, backgroundColor:'#fff' },\n  box: { width:'100%', maxWidth:420 },\n  title: { fontSize:20, marginBottom:12, textAlign:'center' },\n  input: { borderWidth:1, borderColor:'#ddd', padding:10, marginBottom:12, borderRadius:6 }\n});\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}